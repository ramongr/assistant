#!/usr/bin/env ruby

require 'colorize'

VERSION_FILE = 'lib/assistant/version.rb'.freeze

def process_command(argument)
  original_version = version_arr.join('.')
  case argument
  when '-h', '--help'
    return puts help_message
  when '--patch-version', '--patch'
    bumped_version = [version_arr[0], version_arr[1], version_arr[2] + 1].join('.')
  when '--minor-version', '--minor'
    bumped_version = [version_arr[0], version_arr[1] + 1, 0].join('.')
  when '--major-version', '--version'
    bumped_version = [version_arr[0] + 1, 0, 0].join('.')
  else
    return puts "Invalid command #{argument}, use --help to see all available commands".colorize(:red)
  end

  bumped_version_file = version_file.to_s.gsub("VERSION = '#{original_version}'", "VERSION = '#{bumped_version}'")
  write_file(bumped_version_file)
end

private

def help_message
  puts "\t\t\t\t\tVERSION BUMP OPTIONS\t\t\t\t\t"
  puts "--bump-patch-version --patch\t\tBumps the patch version\t\t\t\t\t"
  puts "--bump-minor-version --minor\t\tBumps the minor version and sets the patch version to 0 "
  puts "--bump-major-version --version\t\tBumps the major version sets all other values to 0\t"
end

def write_file(text)
  File.write(VERSION_FILE, text)
end

def version_arr
  version_string.split('.').map(&:to_i)
end

def version_string
  version_file[/(\d+.\d+.\d+)/]
end

def version_file
  File.read(VERSION_FILE)
end

ARGV.each do |argument|
  process_command(argument)
end
